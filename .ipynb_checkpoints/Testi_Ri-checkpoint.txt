import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression, Ridge, RANSACRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
sales_data = pd.read_csv("sales_data.csv")

# Convert the 'Date' column to a datetime format
sales_data['Date'] = pd.to_datetime(sales_data['Date'])

# Create new columns for the month and day of the week
sales_data['Month'] = sales_data['Date'].dt.month
sales_data['DayOfWeek'] = sales_data['Date'].dt.dayofweek

# Create a heatmap of the correlation between variables
sns.heatmap(sales_data.corr(), annot=True, cmap='coolwarm')
plt.show()

# Create a bar chart of the total sales for each product
product_sales = sales_data.groupby('ProductName')['Sales'].sum().sort_values(ascending=False)
plt.figure(figsize=(10,6))
sns.barplot(x=product_sales.index, y=product_sales.values, palette="Blues_r")
plt.title("Total Sales by Product")
plt.xticks(rotation=45)
plt.xlabel("Product")
plt.ylabel("Total Sales")
plt.show()

# Create a line chart of the sales for each product over the past month
past_month = sales_data[sales_data['Date'] >= pd.to_datetime('today') - pd.DateOffset(months=1)]
past_month_sales = past_month.groupby(['ProductName', 'Date'])['Sales'].sum().reset_index()
plt.figure(figsize=(10,6))
sns.lineplot(x='Date', y='Sales', hue='ProductName', data=past_month_sales, palette="Blues_r")
plt.title("Product Sales Over the Past Month")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.show()

# Create a line chart of the sales for each product over the past week
past_week = sales_data[sales_data['Date'] >= pd.to_datetime('today') - pd.DateOffset(weeks=1)]
past_week_sales = past_week.groupby(['ProductName', 'Date'])['Sales'].sum().reset_index()
plt.figure(figsize=(10,6))
sns.lineplot(x='Date', y='Sales', hue='ProductName', data=past_week_sales, palette="Blues_r")
plt.title("Product Sales Over the Past Week")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.show()

# Create a line chart of the time of day when each product is most commonly sold
times_of_day = ['Morning', 'Afternoon', 'Evening', 'Night']
for product in sales_data['ProductName'].unique():
    product_data = sales_data[sales_data['ProductName'] == product]
    product_sales_by_time = product_data.groupby('TimesOfDay')['Sales'].mean().reindex(times_of_day)
    plt.figure(figsize=(10,6))
    sns.lineplot(x=product_sales_by_time.index, y=product_sales_by_time.values, palette="Blues_r")
    plt.title(f"Sales of {product} by Time of Day")
    plt.xlabel("Time of Day")
    plt.ylabel("Sales")
    plt.show()

# Splitting the data into train and test sets
train_size = int(len(sales_data) * 0.7)
train_data, test_data = sales_data[:train_size], sales_data[train_size:]

# Creating X and y for training and testing sets
X_train, y_train = train_data[['ProductName', 'TimesOfDay']], train_data['Sales']
X_test, y_test = test_data[['ProductName', 'TimesOfDay']], test_data['Sales']

# One-hot encoding categorical variables in X_train and X_test
ohe = OneHotEncoder(sparse=False, handle_unknown='ignore')
X_train_ohe = ohe.fit_transform(X_train)
X_test_ohe = ohe.transform(X_test)

# Scaling numerical variables in X_train and X_test
scaler = StandardScaler()
X_train_num = scaler.fit_transform(train_data[['Date']])
X_test_num = scaler.transform(test_data[['Date']])

# Concatenating the one-hot encoded and scaled numerical variables for X_train and X_test
X_train_final = np.concatenate((X_train_ohe, X_train_num), axis=1)
X_test_final = np.concatenate((X_test_ohe, X_test_num), axis=1)

# Fitting and evaluating the models
models = {
    'Random Forest Regressor': RandomForestRegressor(random_state=42),
    'Decision Tree Regressor': DecisionTreeRegressor(random_state=42),
    'Linear Regression': LinearRegression(),
    'Ridge Regression': Ridge(),
    'Ransac Regression': RANSACRegressor()
}

accuracies = {}
for name, model in models.items():
    model.fit(X_train_final, y_train)
    y_pred = model.predict(X_test_final)
    accuracy = r2_score(y_test, y_pred)
    accuracies[name] = accuracy

# Displaying the accuracies in a table
df_accuracies = pd.DataFrame(list(accuracies.items()), columns=['Model', 'Accuracy'])
df_accuracies.sort_values('Accuracy', ascending=False, inplace=True)
print(df_accuracies)
